import { describe, it, expect } from 'vitest';
import {
  encodeJoin,
  decodeJoin,
  encodeInput,
  decodeInput,
  encodeRespawn,
  decodeRespawn,
  encodePing,
  decodePing,
  encodeWelcome,
  decodeWelcome,
  encodeState,
  decodeState,
  encodePong,
  decodePong,
  MsgType,
} from './index';

describe('binary protocol round-trip', () => {
  it('Join', () => {
    const name = 'PlayerOne';
    const buf = encodeJoin(name);
    const msg = decodeJoin(buf);
    expect(msg.type).toBe(MsgType.C2S_Join);
    expect(msg.name).toBe(name);
  });

  it('Input', () => {
    const buf = encodeInput(65535, Math.PI - 0.5, true);
    const msg = decodeInput(buf);
    expect(msg.type).toBe(MsgType.C2S_Input);
    expect(msg.seq).toBe(65535);
    expect(Math.abs(msg.angle - (Math.PI - 0.5)) < 1e-6).toBe(true);
    expect(msg.boost).toBe(true);
  });

  it('Respawn', () => {
    const buf = encodeRespawn();
    const msg = decodeRespawn(buf);
    expect(msg.type).toBe(MsgType.C2S_Respawn);
  });

  it('Ping/Pong', () => {
    const t = 123456789 >>> 0;
    const bp = encodePing(t);
    const mp = decodePing(bp);
    expect(mp.type).toBe(MsgType.C2S_Ping);
    expect(mp.t >>> 0).toBe(t);

    const b2 = encodePong(t);
    const m2 = decodePong(b2);
    expect(m2.type).toBe(MsgType.S2C_Pong);
    expect(m2.t >>> 0).toBe(t);
  });

  it('Welcome', () => {
    const buf = encodeWelcome(42, 2048);
    const msg = decodeWelcome(buf);
    expect(msg.type).toBe(MsgType.S2C_Welcome);
    expect(msg.playerId).toBe(42);
    expect(msg.worldSize).toBe(2048);
  });

  it('State', () => {
    const players = [
      { id: 1, len: 50, headX: 100.5, headY: -20.25, color: 512, alive: true },
      { id: 2, len: 10, headX: 0, headY: 0, color: 1023, alive: false },
    ];
    const food = [
      { x: 1.5, y: 2.5 },
      { x: -10, y: 3.25 },
    ];
    const buf = encodeState(999, players, food);
    const msg = decodeState(buf);
    expect(msg.type).toBe(MsgType.S2C_State);
    expect(msg.tick).toBe(999);
    expect(msg.players.length).toBe(players.length);
    for (let i = 0; i < players.length; i++) {
      const a = players[i];
      const b = msg.players[i];
      expect(b.id).toBe(a.id);
      expect(b.len).toBe(a.len);
      expect(Math.abs(b.headX - a.headX) < 1e-6).toBe(true);
      expect(Math.abs(b.headY - a.headY) < 1e-6).toBe(true);
      expect(b.color).toBe(a.color);
      expect(b.alive).toBe(a.alive);
    }
    expect(msg.food.length).toBe(food.length);
    for (let i = 0; i < food.length; i++) {
      expect(Math.abs(msg.food[i].x - food[i].x) < 1e-6).toBe(true);
      expect(Math.abs(msg.food[i].y - food[i].y) < 1e-6).toBe(true);
    }
  });
});




